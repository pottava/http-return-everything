name: Publish artifacts

on:
  push:
    branches:
    - master
    tags:
    - v*

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Tests
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Generate code based on the OpenAPI spec
      run:  docker-compose -f dev/tools.yml run --rm codegen
    - name: Make a mod directory
      run:  mkdir -p ~/go/pkg/mod
    - uses: actions/cache@v2
      id: cache
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Resolve dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: docker-compose -f dev/tools.yml run --rm vendor
    - name: Run static code analysis
      run: docker-compose -f dev/tools.yml run --rm lint
    - name: Run unit tests
      run: docker-compose -f dev/tools.yml run --rm test
    - name: Run API tests
      run: |
        docker-compose -f dev/runtime.yml up -d
        sleep 15
        docker-compose -f spec/tools.yml run --rm test

  release-artifacts:
    name: Save artifacts
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-18.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Generate code based on the OpenAPI spec
      run:  docker-compose -f dev/tools.yml run --rm codegen
    - name: Release
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --rm-dist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-docker-image:
    name: Push Docker image
    if: github.event_name == 'push' && contains(github.ref, 'v2.0.')
    needs: test
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: gcr.io/pottava/re:v2.0
    steps:
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Build & Push
      run: |
        docker build --tag "${IMAGE_NAME}" --file prod/2.0/Dockerfile .
        gcloud --quiet auth configure-docker
        docker push "${IMAGE_NAME}"
    timeout-minutes: 10
